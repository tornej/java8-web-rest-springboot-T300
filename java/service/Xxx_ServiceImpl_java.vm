## Include
#parse("include/var_entity.vm")
## Use macro resolve header
#package($SRC)
## use macro for feed $haveCriteria
#haveCriteria()
## Generate criteria file only if needed
#if($haveCriteria)
#set($packageWithDot = ${ROOT_PKG})
#set($packageWithSlash = $packageWithDot.replace(".", "/"))
$generator.generate($target.entityName ,  "${criteriaClass}.java", "${SRC}/${packageWithSlash}/service/criteria" , "java/service/criteria/Xxx_Criteria_java.vm"  )
#end
#if($haveCriteria)
import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
#end
import ${pack_entity}.${entityClass};
#if($compositeKey)
import ${pack_entity}.${entityKeyClass};
#end
import ${pack_repository}.${repositoryClass};
#if($haveCriteria)
import ${pack_criteria}.${criteriaClass};
#end
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
#if($haveCriteria)
import org.springframework.data.jpa.domain.Specification;
#end
import org.springframework.stereotype.Service;

/**
 * Service implementation for ${entityClass}.
 * $author
 */
@Service
public class $serviceClass implements $serviceInterface {

	@Autowired
	private $repositoryClass $repositoryInstance;

#if($haveCriteria)
	@Override
	public Page<$entityClass> search(Pageable pageable, $criteriaClass criteria) {
		return ${repositoryInstance}.findAll(new ${entityClass}Specification(criteria), pageable);
	}
#else
	@Override
	public Page<$entityClass> search(Pageable pageable) {
		return ${repositoryInstance}.findAll(pageable);
	}
#end

	@Override
	public $entityClass get($keyArgsListWrapperType) {
#if($compositeKey)
		// Build the composite key
		$entityKeyClass key = new $entityKeyClass($keyArgsList);
		return ${repositoryInstance}.findById(key);
#else
		return ${repositoryInstance}.findById($keyArgsList);
#end
	}

	@Override
	public Boolean delete($keyArgsListWrapperType) {
#if($compositeKey)
		// Build the composite key
		$entityKeyClass key = new $entityKeyClass($keyArgsList);
		if (${repositoryInstance}.findById(key) != null) {
			${repositoryInstance}.deleteById(key);
			return true;
		}
#else
		if (${repositoryInstance}.findById($keyArgsList) != null) {
			${repositoryInstance}.deleteById($keyArgsList);
			return true;
		}
#end
		return false;
	}

	@Override
	public $entityClass create($entityClass $entityInstance) {
		return ${repositoryInstance}.save($entityInstance);
	}

	@Override
	public Boolean save($entityClass $entityInstance) {
#if($compositeKey)
		// Build the composite key
		$entityKeyClass pk = new $entityKeyClass($keyArgsListGetterOnInstance);
#else
## use macro key type resolver
#keyResolver()
		final $keyType pk = $keyArgsListGetterOnInstance;
#end
		if (${repositoryInstance}.findById(pk) != null) {
			${repositoryInstance}.save($entityInstance);
			return true;
		}
		return false;
	}

	@Override
	public Boolean exist($entityClass $entityInstance) {
        if ($keyArgsListGetterOnInstance == null)
            return false;
#if($compositeKey)
		// Build the composite key
		$entityKeyClass pk = new $entityKeyClass($keyArgsListGetterOnInstance);
		return ${repositoryInstance}.existsById(pk);
#else
		return ${repositoryInstance}.existsById($keyArgsListGetterOnInstance);
#end
	}

#if($haveCriteria)
	class ${entityClass}Specification implements Specification<$entityClass> {

		private $criteriaClass criteria;

		public ${entityClass}Specification($criteriaClass criteria) {
			this.criteria = criteria;
		}

		@Override
		public Predicate toPredicate(Root<$entityClass> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
			final List<Predicate> predicates = new ArrayList<>();
#foreach($field in $entity.nonKeyAttributes)
#if($field.type == 'String')
#set($fieldName = $fn.capitalize($field.name))
			if (StringUtils.isNotBlank(criteria.get${fieldName}())) {
				predicates.add(builder.like(builder.lower(root.get("$field.name")),
						criteria.get${fieldName}().toLowerCase() + "%"));
			}
#end
#end 
			return andTogether(predicates, builder);
		}

		private Predicate andTogether(List<Predicate> predicates, CriteriaBuilder builder) {
			return builder.and(predicates.toArray(new Predicate[0]));
		}
	}
#end

}
